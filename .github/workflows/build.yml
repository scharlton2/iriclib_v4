name: cmake-build

on:
  pull_request:
    branches:
      - develop_v4
  push:
  workflow_dispatch:

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  # BUILD_TYPE: Release
  # GENERATOR: 'Visual Studio 16 2019'
  # GENERATOR_NO_QUOTES: Visual Studio 16 2019
  # SGEN: vs2019-x64
  # IFORT_COMPILER21: C:\Program Files (x86)\Intel\oneAPI\compiler\2021.2.0\windows\
  GENERATOR: Ninja Multi-Config
  SGEN: ninja-x64
  PYTHON_INSTALL_DIR: C:\Python-x64
  PYTHON_VERSION: 3.8.10

  # oneAPI
  # Based on https://github.com/oneapi-src/oneapi-ci/blob/master/.github/workflows/build_all.yml
  WINDOWS_HPCKIT_URL: https://registrationcenter-download.intel.com/akdlm/IRC_NAS/2a13d966-fcc5-4a66-9fcc-50603820e0c9/w_HPCKit_p_2023.1.0.46357_offline.exe
  WINDOWS_HPCKIT_FILE: hpckit.exe
  WINDOWS_HPCKIT_COMPONENTS: intel.oneapi.win.ifort-compiler

jobs:

  cache-hdf5:
    name: cache-hdf5
    strategy:
      fail-fast: false
      matrix:
        os: [windows-2019,ubuntu-22.04]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout iricdev
        uses: actions/checkout@v3
        with:
          repository: i-RIC/iricdev-2019

      - name: Init github env
        shell: bash
        run: ./init.github_env.sh >> "$GITHUB_ENV"

      - name: Setup path for msbuild
        if: ${{ runner.os == 'Windows' }}
        uses: microsoft/setup-msbuild@v1.1
        with:
          vs-version: '[16.9,17)'

      - name: Cache hdf5
        id: cache-hdf5
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/lib/install/hdf5-${{ env.HDF5_VER }}
          key: ${{ matrix.os }}-hdf5-${{ hashFiles('./hdf5.*') }}

      - name: Install oneAPI Fortran
        if: ${{ steps.cache-hdf5.outputs.cache-hit != 'true' && runner.os == 'Windows' }}
        shell: cmd
        run: |
          curl -fSLo ${{ env.WINDOWS_HPCKIT_FILE }} ${{ env.WINDOWS_HPCKIT_URL }}
          start /b /wait ${{ env.WINDOWS_HPCKIT_FILE }} -s -x -f hpckit_extracted --log hpckit_extracted.log
          hpckit_extracted\bootstrapper.exe -s --action install --components=${{ env.WINDOWS_HPCKIT_COMPONENTS }} --eula=accept -p=NEED_VS2017_INTEGRATION=0 -p=NEED_VS2019_INTEGRATION=1 -p=NEED_VS2022_INTEGRATION=0 --log-dir=.

      - name: Build hdf5 (windows)
        if: ${{ steps.cache-hdf5.outputs.cache-hit != 'true' && matrix.os == 'windows-2019' }}
        shell: cmd
        run: |
          copy programs_std.prop programs.prop
          call "C:\Program Files (x86)\Intel\oneAPI\setvars.bat" intel64 vs2019
          REM call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          msbuild /noLogo /maxCpuCount /target:hdf5-build iricdev.proj

      - name: Build hdf5 (non-windows)
        if: ${{ steps.cache-hdf5.outputs.cache-hit != 'true' && runner.os != 'Windows' }}
        run: |
          make -f iricdev.mk hdf5-build

  cache-poco:
    name: cache-poco
    strategy:
      fail-fast: false
      matrix:
        os: [windows-2019,ubuntu-22.04]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout iricdev
        uses: actions/checkout@v3
        with:
          repository: i-RIC/iricdev-2019

      - name: Init github env
        shell: bash
        run: ./init.github_env.sh >> "$GITHUB_ENV"
  
      - name: Setup path for msbuild
        if: ${{ runner.os == 'Windows' }}
        uses: microsoft/setup-msbuild@v1.1
        with:
          vs-version: '[16.9,17)'

      - name: Cache poco
        id: cache-poco
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/lib/install/poco-${{ env.POCO_VER }}
          key: ${{ matrix.os }}-poco-${{ hashFiles('./poco.*') }}

      - name: Install ninja (linux)
        if: ${{ runner.os == 'Linux' }}
        run: sudo apt -y install ninja-build

      - name: Build poco (windows)
        if: ${{ steps.cache-poco.outputs.cache-hit != 'true' && matrix.os == 'windows-2019' }}
        shell: cmd
        run: |
          copy programs_std.prop programs.prop
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          msbuild /noLogo /maxCpuCount /target:poco-build iricdev.proj

      - name: Build poco (non-windows)
        if: ${{ steps.cache-poco.outputs.cache-hit != 'true' && runner.os != 'Windows' }}
        run: |
          make -f iricdev.mk poco-build

  build-iriclib:
    name: build-iriclib
    strategy:
      fail-fast: false
      matrix:
        os: [windows-2019,ubuntu-22.04]

    runs-on: ${{ matrix.os }}
    needs: [cache-hdf5, cache-poco]

    steps:
      - name: Checkout iricdev
        uses: actions/checkout@v3
        with:
          repository: i-RIC/iricdev-2019
          persist-credentials: false               # required to commit with a Personal access token
          ref: 2019                                # @todo change to master_v4 or develop_v4

      - name: Checkout iriclib
        uses: actions/checkout@v3
        with:
          path: lib/src/iriclib-git

      - name: Init github env
        shell: bash
        run: ./init.github_env.sh >> "$GITHUB_ENV"

      - name: Setup path for msbuild
        if: runner.os == 'Windows'
        uses: microsoft/setup-msbuild@v1.1
        with:
          vs-version: '[16.9,17)'

      - name: Cache hdf5
        id: cache-hdf5
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/lib/install/hdf5-${{ env.HDF5_VER }}
          key: ${{ matrix.os }}-hdf5-${{ hashFiles('./hdf5.*') }}

      - name: Cache poco
        id: cache-poco
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/lib/install/poco-${{ env.POCO_VER }}
          key: ${{ matrix.os }}-poco-${{ hashFiles('./poco.*') }}

      - name: Export iriclib version
        shell: bash
        run: |
          cd ./lib/src/iriclib-git
          while IFS= read -r line; do
          if [[ $line =~ ^[[:space:]][[:space:]]VERSION\ ([0-9]+)\.([0-9]+)(\.([0-9]+))? ]]; then
            major="${BASH_REMATCH[1]}"
            minor="${BASH_REMATCH[2]}"
            patch="${BASH_REMATCH[4]}"
            if [[ -n "$patch" ]]; then
              ((patch++))
            else
              patch=0
            fi
            export IRICLIB_VER="$major.$minor.$patch"
            echo "  VERSION $IRICLIB_VER"
          else
            echo "$line"
          fi
          done < CMakeLists.txt > CMakeLists.txt.tmp
          mv CMakeLists.txt.tmp CMakeLists.txt
          echo "IRICLIB_VER=$IRICLIB_VER" >> "$GITHUB_ENV"

      # Debug Python based on https://github.com/actions/virtual-environments/issues/786#issuecomment-620524456
      - name: Cache python (windows)
        if: ${{ runner.os == 'Windows' }}
        uses: actions/cache@v3
        id: cache-python
        with:
          path: '${{ env.PYTHON_INSTALL_DIR }}\'
          key: '${{ runner.os }}-cache-python-v${{ env.PYTHON_VERSION }}-amd64'

      - name: Download Python (windows)
        if: ${{ runner.os == 'Windows' && steps.cache-python.outputs.cache-hit != 'true' }}
        uses: carlosperate/download-file-action@v2
        id: download-python
        with:
          file-url: 'https://www.python.org/ftp/python/${{ env.PYTHON_VERSION }}/python-${{ env.PYTHON_VERSION }}-amd64.exe'
          file-name: 'python-${{ env.PYTHON_VERSION }}-amd64.exe'
          location: '${{ runner.workspace }}\dl\'

      # if this step fails see https://github.com/actions/setup-python#windows
      - name: Install Python debug (x64) (windows) # we need debug binaries and precompiled standard libraries
        if: ${{ runner.os == 'Windows' && steps.cache-python.outputs.cache-hit != 'true' }}
        run: |
          Start-Process -FilePath "${{ runner.workspace }}\dl\python-${{ env.PYTHON_VERSION }}-amd64.exe" -ArgumentList "/quiet Include_debug=1 Include_dev=1 Include_lib=1 Include_pip=1 PrependPath=1 CompileAll=1 InstallAllUsers=0 TargetDir=${{ env.PYTHON_INSTALL_DIR }}\" -Verb runas -Wait

      - name: Install Python 3.8 (non-windows)
        if: ${{ runner.os != 'Windows' }}
        uses: actions/setup-python@v4
        with:
          python-version: 3.8

      - name: Display Python version (windows)
        if: runner.os == 'Windows'
        run: ${{ env.PYTHON_INSTALL_DIR }}\python -c "import sys; print(sys.version)"
        shell: cmd

      - name: Display Python version (non-windows)
        if: runner.os != 'Windows'
        run: |
          python --version
          python -c "import sys; print(sys.version)"
          which python

      - name: List linker libs
        if: runner.os == 'Windows'
        run: ${{ env.PYTHON_INSTALL_DIR }}\python -c "import sysconfig;import os; print(os.listdir(sysconfig.get_config_vars('prefix')[0] + '/libs'))"

      - name: Install ninja (linux)
        if: ${{ runner.os == 'Linux' }}
        run: sudo apt -y install ninja-build

      - name: Configure iriclib (windows)
        if: ${{ matrix.os == 'windows-2019' }}
        run: |
          Set-Location lib/src/iriclib-git
          cmake --preset vs2019_no_fortran -DPython_ROOT_DIR=${{ env.PYTHON_INSTALL_DIR }}

      - name: Configure iriclib (non-windows)
        if: ${{ matrix.os != 'windows-2019' }}
        run: |
          cd lib/src/iriclib-git
          cmake --preset ninja_no_fortran

      - name: Build iriclib debug (windows)
        if: ${{ matrix.os == 'windows-2019' }}
        run: |
          Set-Location lib/src/iriclib-git
          cmake --build --preset vs2019_no_fortran --config Debug

      - name: Build iriclib debug (non-windows)
        if: ${{ matrix.os != 'windows-2019' }}
        run: |
          cd lib/src/iriclib-git
          cmake --build --preset ninja_no_fortran --config Debug

      - name: Build iriclib release (windows)
        if: ${{ matrix.os == 'windows-2019' }}
        run: |
          Set-Location lib/src/iriclib-git
          cmake --build --preset vs2019_no_fortran --config Release

      - name: Build iriclib release (non-windows)
        if: ${{ matrix.os != 'windows-2019' }}
        run: |
          cd lib/src/iriclib-git
          cmake --build --preset ninja_no_fortran --config Release  

      - name: Test iriclib debug (windows)
        if: ${{ matrix.os == 'windows-2019' }}
        run: |
          Set-Location lib/src/iriclib-git
          ctest --build --preset vs2019_no_fortran --build-config Debug

      - name: Test iriclib debug (non-windows)
        if: ${{ matrix.os != 'windows-2019' }}
        run: |
          cd lib/src/iriclib-git
          ctest --build --preset ninja_no_fortran --build-config Debug  

      - name: Test iriclib release (windows)
        if: ${{ matrix.os == 'windows-2019' }}
        run: |
          Set-Location lib/src/iriclib-git
          ctest --build --preset vs2019_no_fortran --build-config Release

      - name: Test iriclib release (non-windows)
        if: ${{ matrix.os != 'windows-2019' }}
        run: |
          cd lib/src/iriclib-git
          ctest --build --preset ninja_no_fortran --build-config Release

      - name: Install iriclib debug (windows)
        if: ${{ matrix.os == 'windows-2019' }}
        run: |
          Set-Location lib/src/iriclib-git/_vs2019_no_fortran
          cmake --install . --config Debug --prefix ..\..\..\install\iriclib-$env:IRICLIB_VER\

      - name: Install iriclib debug (non-windows)
        if: ${{ matrix.os != 'windows-2019' }}
        run: |
          cd lib/src/iriclib-git/_ninja_no_fortran
          cmake --install . --config Debug --prefix ../../../install/iriclib-$IRICLIB_VER/
  
      - name: Install iriclib release (windows)
        if: ${{ matrix.os == 'windows-2019' }}
        run: |
          Set-Location lib/src/iriclib-git/_vs2019_no_fortran
          cmake --install . --config Release --prefix ..\..\..\install\iriclib-$env:IRICLIB_VER\

      - name: Install iriclib release (non-windows)
        if: ${{ matrix.os != 'windows-2019' }}
        run: |
          cd lib/src/iriclib-git/_ninja_no_fortran
          cmake --install . --config Release --prefix ../../../install/iriclib-$IRICLIB_VER/ 

      - name: 7z sdk (windows-2019)
        if: ${{ matrix.os == 'windows-2019' }}
        run: |
          Rename-Item .\lib\install iricsdk
          7z a iricsdk.7z .\lib\iricsdk
          Rename-Item .\lib\iricsdk install

      - name: 7z sdk (not windows-2019)
        if: ${{ matrix.os != 'windows-2019' }}
        run: |
          mv ./lib/install ./lib/iricsdk
          7z a iricsdk-${{ matrix.os }}.7z ./lib/iricsdk
          mv ./lib/iricsdk ./lib/install

      - name: Upload artifact (user forks and pull requests) (windows)
        if: ${{ matrix.os == 'windows-2019' }}
        uses: actions/upload-artifact@v3
        with:
          name: iricsdk
          path: iricsdk.7z  

      - name: Upload artifact (user forks and pull requests) (non-windows)
        if: ${{ matrix.os != 'windows-2019' }}
        uses: actions/upload-artifact@v3
        with:
          name: iricsdk-${{ matrix.os }}
          path: iricsdk-${{ matrix.os }}.7z  

  release:
    name: release
    runs-on: windows-2019
    needs: [build-iriclib]

    steps:
      - name: Checkout iriclib
        uses: actions/checkout@v3

      - name: Export iriclib version
        shell: bash
        run: |
          while IFS= read -r line; do
          if [[ $line =~ ^[[:space:]][[:space:]]VERSION\ ([0-9]+)\.([0-9]+)(\.([0-9]+))? ]]; then
            major="${BASH_REMATCH[1]}"
            minor="${BASH_REMATCH[2]}"
            patch="${BASH_REMATCH[4]}"
            if [[ -n "$patch" ]]; then
              ((patch++))
            else
              patch=0
            fi
            export IRICLIB_VER="$major.$minor.$patch"
            echo "  VERSION $IRICLIB_VER"
          else
            echo "$line"
          fi
          done < CMakeLists.txt > CMakeLists.txt.tmp
          mv CMakeLists.txt.tmp CMakeLists.txt
          echo "IRICLIB_VER=$IRICLIB_VER" >> "$GITHUB_ENV"

      - name: Download iricsdk.7z artifact
        uses: actions/download-artifact@v3
        with:
          name: iricsdk

      - name: Download iricsdk-ubuntu-22.04.7z artifact
        uses: actions/download-artifact@v3
        with:
          name: iricsdk-ubuntu-22.04

      - name: List iricsdk-ubuntu-22.04.7z
        run: Get-ChildItem -Recurse

      # - name: Commit and push
      #   if: ${{ github.repository == 'i-RIC/iriclib_v4' && github.event_name != 'pull_request' }}
      #   uses: actions-js/push@master
      #   with:
      #     github_token: ${{ secrets.GITHUB_TOKEN }}
      #     branch: develop_v4

  
      - name: Create release
        ###if: ${{ github.repository == 'i-RIC/iriclib_v4' && github.event_name != 'pull_request' }}
        env:
          releases_url: ${{ github.api_url }}/repos/${{ github.repository }}/releases
        run: |
          # store new commit
          $target_commitish = (git log -n1 --format=format:"%H")

          if (! ($env:IRICLIB_VER -match "^(?<major>0|[1-9]\d*)\.(?<minor>[0|1-9]\d*)\.(?<patch>[0|1-9]\d*)$") ) {
            throw "Bad version"
          }

          # create headers dictionary
          $h = @{
            "Accept"               = "application/vnd.github+json"
            "Authorization"        = "token ${{ secrets.GITHUB_TOKEN }}"
            "X-GitHub-Api-Version" = "2022-11-28"
          }

          $releases_url = "${{ env.releases_url }}"

          # create release
          # POST /repos/{owner}/{repo}/releases
          # see https://docs.github.com/en/rest/releases/releases?apiVersion=2022-11-28#create-a-release
          # see https://docs.github.com/ja/rest/releases/releases?apiVersion=2022-11-28#create-a-release
          #
          $create = @{
            "tag_name"         = "v" + $Matches[0]
            "target_commitish" = "$target_commitish"
            "name"             = "iriclib " + $Matches[0]
            "draft"            = $true
          }
          $create_json = $create | ConvertTo-Json
          $release = Invoke-WebRequest -Uri $releases_url -Headers $h -Method POST -Body $create_json

          # upload artifact (asset) iricsdk-IRICLIB_VER.7z
          # POST /repos/{owner}/{repo}/releases/{release_id}/assets
          # see https://docs.github.com/en/rest/releases/assets?apiVersion=2022-11-28#upload-a-release-asset
          # see https://docs.github.com/ja/rest/releases/assets?apiVersion=2022-11-28#upload-a-release-asset
          #
          $upload_uri = ($release.Content | ConvertFrom-Json).upload_url
          if (! ($upload_uri -match  "(.*)\{\?name,label\}") ) {
            # expecting URI{?name,label}
            # ie https://uploads.github.com/repos/scharlton2/iriclib_v4/releases/24058628/assets{?name,label}
            throw "Bad upload_url"
          }
          $upload_uri = $Matches[1] + "?name=iricsdk-$env:IRICLIB_VER.7z"
          $h["Content-type"] = "application/x-7z-compressed"
          $bytes = [System.IO.File]::ReadAllBytes("iricsdk.7z")
          $upload = Invoke-WebRequest -Uri $upload_uri -Headers $h -Method POST -Body $bytes

          # upload artifact (asset) iricsdk-IRICLIB_VER-ubuntu-22.04.7z
          $upload_uri = ($release.Content | ConvertFrom-Json).upload_url
          if (! ($upload_uri -match  "(.*)\{\?name,label\}") ) {
            # expecting URI{?name,label}
            # ie https://uploads.github.com/repos/scharlton2/iriclib_v4/releases/24058628/assets{?name,label}
            throw "Bad upload_url"
          }
          $upload_uri = $Matches[1] + "?name=iricsdk-$env:IRICLIB_VER-ubuntu-22.04.7z"
          $h["Content-type"] = "application/x-7z-compressed"
          $bytes = [System.IO.File]::ReadAllBytes("iricsdk-ubuntu-22.04.7z")
          $upload = Invoke-WebRequest -Uri $upload_uri -Headers $h -Method POST -Body $bytes

          # update release
          # PATCH /repos/{owner}/{repo}/releases/{release_id}
          # see https://docs.github.com/en/rest/releases/releases?apiVersion=2022-11-28#update-a-release
          # see https://docs.github.com/ja/rest/releases/releases?apiVersion=2022-11-28#update-a-release
          #
          $release_id = ($release.Content | ConvertFrom-Json).id
          $h.Remove("Content-type")
          $update = @{ "draft" = $false }
          $update_json = $update | ConvertTo-Json
          $release = Invoke-WebRequest -Uri "$releases_url/$release_id" -Headers $h -Method PATCH -Body $update_json

          # display download url
          ###Write-Output "$((($release.Content | ConvertFrom-Json).assets).browser_download_url)"
          ###Get-FileHash "iricsdk.7z"
          ###Remove-Item iricsdk.7z


      - name: Update iriclib version
        if: ${{ github.repository == 'i-RIC/iriclib_v4' && github.event_name != 'pull_request' }}
        run: |
          # versions.cmd
          (Get-Content .\versions.cmd) | Foreach-Object {
            if ($_ -match '^set IRICLIB_VER=.*$') {
              return "set IRICLIB_VER=" + $env:IRICLIB_VER
            }
            return $_
          } | Set-Content .\versions.cmd
          git status
          git diff

      - name: Commit and push iricdev
        if: ${{ github.repository == 'i-RIC/iriclib_v4' && github.event_name != 'pull_request' }}
        uses: actions-js/push@master
        with:
          github_token: ${{ secrets.IRICLIB_V4_ACTION_GHP_TOKEN }}
          repository: i-RIC/iricdev-2019
          branch: 2019
  