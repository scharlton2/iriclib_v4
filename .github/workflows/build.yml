name: cmake-build

on:
  push:
    branches:
      - develop_v4

  workflow_dispatch:

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  # BUILD_TYPE: Release
  # GENERATOR: 'Visual Studio 16 2019'
  # GENERATOR_NO_QUOTES: Visual Studio 16 2019
  # SGEN: vs2019-x64
  # IFORT_COMPILER21: C:\Program Files (x86)\Intel\oneAPI\compiler\2021.2.0\windows\
  GENERATOR: Ninja Multi-Config
  SGEN: ninja-x64
  PYTHON_INSTALL_DIR: C:\Python-x64
  PYTHON_VERSION: 3.8.10

  # oneAPI
  # Based on https://github.com/oneapi-src/oneapi-ci/blob/master/.github/workflows/build_all.yml
  WINDOWS_HPCKIT_URL: https://registrationcenter-download.intel.com/akdlm/irc_nas/17762/w_HPCKit_p_2021.2.0.2901.exe
  WINDOWS_HPCKIT_FILE: hpckit.exe
  WINDOWS_HPCKIT_COMPONENTS: intel.oneapi.win.ifort-compiler

jobs:

  cache-hdf5:
  # 32m 44s
    runs-on: windows-2019

    steps:
      - name: Checkout iricdev
        uses: actions/checkout@v2
        with:
          repository: i-RIC/iricdev-2019

      - name: Init github env
        run: .\init.github_env.ps1 | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Setup path for msbuild
        uses: microsoft/setup-msbuild@v1.0.2
        with:
          vs-version: '[16.9,17)'

      - name: Cache hdf5
        id: cache-hdf5
        uses: actions/cache@v2
        with:
          path: ${{github.workspace}}/lib/install/hdf5-${{env.HDF5_VER}}
          key: ${{runner.os}}-hdf5-${{hashFiles('./hdf5.*')}}

      - name: Install oneAPI Fortran
        if: steps.cache-hdf5.outputs.cache-hit != 'true'
        shell: cmd
        run: |
          curl -fSLo ${{env.WINDOWS_HPCKIT_FILE}} ${{env.WINDOWS_HPCKIT_URL}}
          start /b /wait ${{env.WINDOWS_HPCKIT_FILE}} -s -x -f hpckit_extracted --log hpckit_extracted.log
          hpckit_extracted\bootstrapper.exe -s --action install --components=${{env.WINDOWS_HPCKIT_COMPONENTS}} --eula=accept --continue-with-optional-error=yes -p=NEED_VS2017_INTEGRATION=0 -p=NEED_VS2019_INTEGRATION=1 --log-dir=.

      - name: Build hdf5
        if: steps.cache-hdf5.outputs.cache-hit != 'true'
        shell: cmd
        run: |
          call "C:\Program Files (x86)\Intel\oneAPI\setvars.bat" intel64 vs2019
          REM call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          msbuild /noLogo /maxCpuCount /target:hdf5-build iricdev.proj

  cache-poco:
  # 12m 2s
    runs-on: windows-2019

    steps:
      - name: Checkout iricdev
        uses: actions/checkout@v2
        with:
          repository: i-RIC/iricdev-2019

      - name: Init github env
        run: .\init.github_env.ps1 | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Setup path for msbuild
        uses: microsoft/setup-msbuild@v1.0.2
        with:
          vs-version: '[16.9,17)'

      - name: Cache poco
        id: cache-poco
        uses: actions/cache@v2
        with:
          path: ${{github.workspace}}/lib/install/poco-${{env.POCO_VER}}
          key: ${{runner.os}}-poco-${{hashFiles('./poco.*')}}

      - name: Build poco
        if: steps.cache-poco.outputs.cache-hit != 'true'
        shell: cmd
        run: |
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          msbuild /noLogo /maxCpuCount /target:poco-build iricdev.proj

  build-iriclib:
    runs-on: windows-2019
    needs: [cache-hdf5, cache-poco]

    steps:
      - name: Checkout iricdev
        uses: actions/checkout@v2
        with:
          repository: i-RIC/iricdev-2019
          persist-credentials: false               # required to commit with a Personal access token
          ref: 2019                                # @todo change to master_v4 or develop_v4

      - name: Checkout iriclib
        uses: actions/checkout@v2
        with:
          path: lib/src/iriclib-git

      - name: Init github env
        run: .\init.github_env.ps1 | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Setup path for msbuild
        uses: microsoft/setup-msbuild@v1.0.2
        with:
          vs-version: '[16.9,17)'

      - name: Cache hdf5
        id: cache-hdf5
        uses: actions/cache@v2
        with:
          path: ${{github.workspace}}/lib/install/hdf5-${{env.HDF5_VER}}
          key: ${{runner.os}}-hdf5-${{hashFiles('./hdf5.*')}}

      - name: Cache poco
        id: cache-poco
        uses: actions/cache@v2
        with:
          path: ${{github.workspace}}/lib/install/poco-${{env.POCO_VER}}
          key: ${{runner.os}}-poco-${{hashFiles('./poco.*')}}

      - name: Export iriclib version
        run: |
          # update CMakeLists.txt version number for iriclib
          Set-Location .\lib\src\iriclib-git
          (Get-Content .\CMakeLists.txt) | Foreach-Object {
            if ($_ -match '^  VERSION (?<major>0|[1-9]\d*)\.(?<minor>0|[1-9]\d*)(?:\.(?<patch>0|[1-9]\d*))?$') {
              if ($Matches.ContainsKey('patch')) {
                $patch = 1 + $Matches['patch']
              }
              else {
                $patch = 0
              }
              $env:IRICLIB_VER = $Matches['major'] + "." + $Matches['minor'] + "." + $patch
              return "  VERSION " + $env:IRICLIB_VER
            }
            return $_
          } | Set-Content .\CMakeLists.txt
          Write-Output "IRICLIB_VER=$env:IRICLIB_VER" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      # Debug Python based on https://github.com/actions/virtual-environments/issues/786#issuecomment-620524456
      - name: Cache python
        uses: actions/cache@v1.1.2
        id: cache-python
        with:
          path: '${{ env.PYTHON_INSTALL_DIR }}\'
          key: '${{ runner.os }}-cache-python-v${{ env.PYTHON_VERSION }}-amd64'

      - name: Download Python
        uses: carlosperate/download-file-action@v1.0.3
        id: download-python
        with:
         file-url: 'https://www.python.org/ftp/python/${{ env.PYTHON_VERSION }}/python-${{ env.PYTHON_VERSION }}-amd64.exe'
         file-name: 'python-${{ env.PYTHON_VERSION }}-amd64.exe'
         location: '${{ runner.workspace }}\dl\'
        if: steps.cache-python.outputs.cache-hit != 'true'

      # if this step fails see https://github.com/actions/setup-python#windows
      - name: Install Python debug (x64) # we need debug binaries and precompiled standard libraries
        run: |
          Start-Process -FilePath "${{ runner.workspace }}\dl\python-${{ env.PYTHON_VERSION }}-amd64.exe" -ArgumentList "/quiet Include_debug=1 Include_dev=1 Include_lib=1 Include_pip=1 PrependPath=1 CompileAll=1 InstallAllUsers=0 TargetDir=${{ env.PYTHON_INSTALL_DIR }}\" -Verb runas -Wait
        if: runner.os == 'Windows' && steps.cache-python.outputs.cache-hit != 'true'
        shell: pwsh

      - name: Display Python version
        if: runner.os == 'Windows'
        run: ${{ env.PYTHON_INSTALL_DIR }}\python -c "import sys; print(sys.version)"
        shell: cmd

      - name: List linker libs
        if: runner.os == 'Windows'
        run: ${{ env.PYTHON_INSTALL_DIR }}\python -c "import sysconfig;import os; print(os.listdir(sysconfig.get_config_vars('prefix')[0] + '/libs'))"

      - name: Configure iriclib
        run: |
          Set-Location lib/src/iriclib-git
          cmake --preset vs2019_no_fortran -DPython_ROOT_DIR=${{ env.PYTHON_INSTALL_DIR }}

      - name: Build iriclib debug
        run: |
          Set-Location lib/src/iriclib-git
          cmake --build --preset vs2019_no_fortran --config debug

      - name: Build iriclib release
        run: |
          Set-Location lib/src/iriclib-git
          cmake --build --preset vs2019_no_fortran --config release

      - name: Test iriclib debug
        run: |
          Set-Location lib/src/iriclib-git
          ctest --build --preset vs2019_no_fortran --build-config debug

      - name: Test iriclib release
        run: |
          Set-Location lib/src/iriclib-git
          ctest --build --preset vs2019_no_fortran --build-config release

      - name: Install iriclib debug
        run: |
          Set-Location lib/src/iriclib-git/_vs2019_no_fortran
          cmake --install . --config debug --prefix ..\..\..\install\iriclib-$env:IRICLIB_VER\

      - name: Install iriclib release
        run: |
          Set-Location lib/src/iriclib-git/_vs2019_no_fortran
          cmake --install . --config release --prefix ..\..\..\install\iriclib-$env:IRICLIB_VER\

      - name: Upload artifact (user forks)
        if: ${{ github.repository != 'i-RIC/iriclib_v4' }}
        uses: actions/upload-artifact@v3
        with:
          name: iricsdk
          path: .\lib\install

      - name: 7z sdk
        run: |
          Rename-Item .\lib\install iricsdk
          7z a iricsdk.7z .\lib\iricsdk
          Rename-Item .\lib\iricsdk install

      - name: Commit and push
        if: ${{ github.repository == 'i-RIC/iriclib_v4' }}
        uses: actions-js/push@master
        with:
          github_token: ${{secrets.GITHUB_TOKEN}}
          directory: lib/src/iriclib-git
          # branch: ${{github.ref}}
          branch: develop_v4

      - name: Commit and push branch
        if: ${{ github.repository != 'i-RIC/iriclib_v4' }}
        uses: actions-js/push@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          directory: lib/src/iriclib-git
          branch: __${{ github.event.repository.name }}_${{ github.run_number }}_${{ github.run_attempt }}

      - name: Create release
        if: ${{ github.repository == 'i-RIC/iriclib_v4' }}
        env:
          releases_url: ${{github.api_url}}/repos/${{github.repository}}/releases
        run: |
          Push-Location lib/src/iriclib-git

          # store new commit
          $target_commitish = (git log -n1 --format=format:"%H")

          Pop-Location

          if (! ($env:IRICLIB_VER -match "^(?<major>0|[1-9]\d*)\.(?<minor>[0|1-9]\d*)\.(?<patch>[0|1-9]\d*)$") ) {
            throw "Bad version"
          }

          # create headers dictionary
          $h = @{"Authorization" = "token ${{secrets.GITHUB_TOKEN}}"}

          $releases_url = "${{env.releases_url}}"

          # create release
          # POST /repos/{owner}/{repo}/releases
          # see https://docs.github.com/en/rest/reference/repos#create-a-release
          # see https://docs.github.com/ja/rest/reference/repos#create-a-release
          #
          $create = @{
            "tag_name"         = "v" + $Matches[0]
            "target_commitish" = "$target_commitish"
            "name"             = "iriclib " + $Matches[0]
            "draft"            = $true
          }
          $create_json = $create | ConvertTo-Json
          $release = Invoke-WebRequest -Uri $releases_url -Headers $h -Method POST -Body $create_json

          # upload artifact (asset)
          # POST /repos/{owner}/{repo}/releases/{release_id}/assets
          # see https://docs.github.com/en/rest/reference/repos#upload-a-release-asset
          # see https://docs.github.com/ja/rest/reference/repos#upload-a-release-asset
          #
          $upload_uri = ($release.Content | ConvertFrom-Json).upload_url
          if (! ($upload_uri -match  "(.*)\{\?name,label\}") ) {
            # expecting URI{?name,label}
            # ie https://uploads.github.com/repos/scharlton2/iriclib_v4/releases/24058628/assets{?name,label}
            throw "Bad upload_url"
          }
          $upload_uri = $Matches[1] + "?name=iricsdk-$env:IRICLIB_VER.7z"
          $h["Content-type"] = "application/x-7z-compressed"
          $bytes = [System.IO.File]::ReadAllBytes("iricsdk.7z")
          $upload = Invoke-WebRequest -Uri $upload_uri -Headers $h -Method POST -Body $bytes

          # update release
          # PATCH /repos/{owner}/{repo}/releases/{release_id}
          # see https://docs.github.com/en/rest/reference/repos#update-a-release
          # see https://docs.github.com/ja/rest/reference/repos#update-a-release
          #
          $release_id = ($release.Content | ConvertFrom-Json).id
          $h.Remove("Content-type")
          $update = @{ "draft" = $false }
          $update_json = $update | ConvertTo-Json
          $release = Invoke-WebRequest -Uri "$releases_url/$release_id" -Headers $h -Method PATCH -Body $update_json

          # display download url
          Write-Output "$((($release.Content | ConvertFrom-Json).assets).browser_download_url)"
          Get-FileHash "iricsdk.7z"
          Remove-Item iricsdk.7z

      - name: Update iriclib version
        if: ${{ github.repository == 'i-RIC/iriclib_v4' }}
        run: |
          # versions.cmd
          (Get-Content .\versions.cmd) | Foreach-Object {
            if ($_ -match '^set IRICLIB_VER=.*$') {
              return "set IRICLIB_VER=" + $env:IRICLIB_VER
            }
            return $_
          } | Set-Content .\versions.cmd
          git status
          git diff

      - name: Commit and push iricdev
        if: ${{ github.repository == 'i-RIC/iriclib_v4' }}
        uses: actions-js/push@master
        with:
          github_token: ${{secrets.IRICLIB_V4_ACTION_GHP_TOKEN}}
          repository: i-RIC/iricdev-2019
          branch: 2019
